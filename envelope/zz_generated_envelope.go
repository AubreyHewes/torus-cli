package envelope

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"

	"github.com/manifoldco/torus-cli/identity"
	"github.com/manifoldco/torus-cli/primitive"
)

type outEnvelope struct {
	ID        *identity.ID        `json:"id"`
	Version   uint8               `json:"version"`
	Body      json.RawMessage     `json:"body"`
	Signature primitive.Signature `json:"sig"`
}

// UnmarshalJSON implements the json.Unmarshaler interface for Unsigned
// envelopes.
func (e *Unsigned) UnmarshalJSON(b []byte) error {
	o := outEnvelope{}
	err := json.Unmarshal(b, &o)
	if err != nil {
		return err
	}

	var body identity.Mutable

	t := o.ID.Type()
	switch t {
	case 0x01:
		switch o.Version {
		case 1:
			body = &primitive.UserV1{}
		case 2:
			body = &primitive.User{}
		}
	case 0x03:
		switch o.Version {
		case 1:
			body = &primitive.Service{}
		}
	case 0x04:
		switch o.Version {
		case 1:
			body = &primitive.Project{}
		}
	case 0x05:
		switch o.Version {
		case 1:
			body = &primitive.Environment{}
		}
	case 0x0d:
		switch o.Version {
		case 1:
			body = &primitive.Org{}
		}
	case 0x0e:
		switch o.Version {
		case 1:
			body = &primitive.Membership{}
		}
	case 0x0f:
		switch o.Version {
		case 1:
			body = &primitive.Team{}
		}
	case 0x10:
		switch o.Version {
		case 2:
			body = &primitive.Token{}
		}
	case 0x11:
		switch o.Version {
		case 1:
			body = &primitive.Policy{}
		}
	case 0x12:
		switch o.Version {
		case 1:
			body = &primitive.PolicyAttachment{}
		}
	case 0x13:
		switch o.Version {
		case 1:
			body = &primitive.OrgInvite{}
		}
	case 0x17:
		switch o.Version {
		case 1:
			body = &primitive.Machine{}
		}
	case 0x18:
		switch o.Version {
		case 1:
			body = &primitive.MachineToken{}
		}
	default:
		return fmt.Errorf("Unknown primitive type id: %#02x", t)
	}

	if body == nil {
		return fmt.Errorf("Unknown schema version %d for primitive type id: %#02x", o.Version, t)
	}

	err = json.Unmarshal(o.Body, body)
	if err != nil {
		return err
	}

	e.ID = o.ID
	e.Version = o.Version

	e.Body = body

	return nil
}

// UserV1 wraps primitive.UserV1
type UserV1 struct {
	ID      *identity.ID      `json:"id"`
	Version uint8             `json:"version"`
	Body    *primitive.UserV1 `json:"body"`
}

// GetID returns the ID of the contained UserV1.
func (e *UserV1) GetID() *identity.ID {
	return e.ID
}

// User wraps primitive.User
type User struct {
	ID      *identity.ID    `json:"id"`
	Version uint8           `json:"version"`
	Body    *primitive.User `json:"body"`
}

// GetID returns the ID of the contained User.
func (e *User) GetID() *identity.ID {
	return e.ID
}

// Service wraps primitive.Service
type Service struct {
	ID      *identity.ID       `json:"id"`
	Version uint8              `json:"version"`
	Body    *primitive.Service `json:"body"`
}

// GetID returns the ID of the contained Service.
func (e *Service) GetID() *identity.ID {
	return e.ID
}

// Project wraps primitive.Project
type Project struct {
	ID      *identity.ID       `json:"id"`
	Version uint8              `json:"version"`
	Body    *primitive.Project `json:"body"`
}

// GetID returns the ID of the contained Project.
func (e *Project) GetID() *identity.ID {
	return e.ID
}

// Environment wraps primitive.Environment
type Environment struct {
	ID      *identity.ID           `json:"id"`
	Version uint8                  `json:"version"`
	Body    *primitive.Environment `json:"body"`
}

// GetID returns the ID of the contained Environment.
func (e *Environment) GetID() *identity.ID {
	return e.ID
}

// Org wraps primitive.Org
type Org struct {
	ID      *identity.ID   `json:"id"`
	Version uint8          `json:"version"`
	Body    *primitive.Org `json:"body"`
}

// GetID returns the ID of the contained Org.
func (e *Org) GetID() *identity.ID {
	return e.ID
}

// Membership wraps primitive.Membership
type Membership struct {
	ID      *identity.ID          `json:"id"`
	Version uint8                 `json:"version"`
	Body    *primitive.Membership `json:"body"`
}

// GetID returns the ID of the contained Membership.
func (e *Membership) GetID() *identity.ID {
	return e.ID
}

// Team wraps primitive.Team
type Team struct {
	ID      *identity.ID    `json:"id"`
	Version uint8           `json:"version"`
	Body    *primitive.Team `json:"body"`
}

// GetID returns the ID of the contained Team.
func (e *Team) GetID() *identity.ID {
	return e.ID
}

// Token wraps primitive.Token
type Token struct {
	ID      *identity.ID     `json:"id"`
	Version uint8            `json:"version"`
	Body    *primitive.Token `json:"body"`
}

// GetID returns the ID of the contained Token.
func (e *Token) GetID() *identity.ID {
	return e.ID
}

// Policy wraps primitive.Policy
type Policy struct {
	ID      *identity.ID      `json:"id"`
	Version uint8             `json:"version"`
	Body    *primitive.Policy `json:"body"`
}

// GetID returns the ID of the contained Policy.
func (e *Policy) GetID() *identity.ID {
	return e.ID
}

// PolicyAttachment wraps primitive.PolicyAttachment
type PolicyAttachment struct {
	ID      *identity.ID                `json:"id"`
	Version uint8                       `json:"version"`
	Body    *primitive.PolicyAttachment `json:"body"`
}

// GetID returns the ID of the contained PolicyAttachment.
func (e *PolicyAttachment) GetID() *identity.ID {
	return e.ID
}

// OrgInvite wraps primitive.OrgInvite
type OrgInvite struct {
	ID      *identity.ID         `json:"id"`
	Version uint8                `json:"version"`
	Body    *primitive.OrgInvite `json:"body"`
}

// GetID returns the ID of the contained OrgInvite.
func (e *OrgInvite) GetID() *identity.ID {
	return e.ID
}

// Machine wraps primitive.Machine
type Machine struct {
	ID      *identity.ID       `json:"id"`
	Version uint8              `json:"version"`
	Body    *primitive.Machine `json:"body"`
}

// GetID returns the ID of the contained Machine.
func (e *Machine) GetID() *identity.ID {
	return e.ID
}

// MachineToken wraps primitive.MachineToken
type MachineToken struct {
	ID      *identity.ID            `json:"id"`
	Version uint8                   `json:"version"`
	Body    *primitive.MachineToken `json:"body"`
}

// GetID returns the ID of the contained MachineToken.
func (e *MachineToken) GetID() *identity.ID {
	return e.ID
}

// UnmarshalJSON implements the json.Unmarshaler interface for Signed
// envelopes.
func (e *Signed) UnmarshalJSON(b []byte) error {
	o := outEnvelope{}
	err := json.Unmarshal(b, &o)
	if err != nil {
		return err
	}

	var body identity.Immutable

	t := o.ID.Type()
	switch t {
	case 0x06:
		switch o.Version {
		case 1:
			body = &primitive.PublicKey{}
		}
	case 0x07:
		switch o.Version {
		case 1:
			body = &primitive.PrivateKey{}
		}
	case 0x08:
		switch o.Version {
		case 1:
			body = &primitive.Claim{}
		}
	case 0x09:
		switch o.Version {
		case 1:
			body = &primitive.KeyringV1{}
		case 2:
			body = &primitive.Keyring{}
		}
	case 0x0a:
		switch o.Version {
		case 1:
			body = &primitive.KeyringMemberV1{}
		case 2:
			body = &primitive.KeyringMember{}
		}
	case 0x0b:
		switch o.Version {
		case 1:
			body = &primitive.CredentialV1{}
		case 2:
			body = &primitive.Credential{}
		}
	case 0x15:
		switch o.Version {
		case 1:
			body = &primitive.KeyringMemberClaim{}
		}
	case 0x16:
		switch o.Version {
		case 1:
			body = &primitive.MEKShare{}
		}
	default:
		return fmt.Errorf("Unknown primitive type id: %#02x", t)
	}

	if body == nil {
		return fmt.Errorf("Unknown schema version %d for primitive type id: %#02x", o.Version, t)
	}

	err = json.Unmarshal(o.Body, body)
	if err != nil {
		return err
	}

	e.ID = o.ID
	e.Version = o.Version
	e.Signature = o.Signature
	e.Body = body

	return nil
}

// PublicKey wraps primitive.PublicKey
type PublicKey struct {
	ID        *identity.ID         `json:"id"`
	Version   uint8                `json:"version"`
	Body      *primitive.PublicKey `json:"body"`
	Signature primitive.Signature  `json:"sig"`
}

// GetID returns the ID of the contained PublicKey.
func (e *PublicKey) GetID() *identity.ID {
	return e.ID
}

// PrivateKey wraps primitive.PrivateKey
type PrivateKey struct {
	ID        *identity.ID          `json:"id"`
	Version   uint8                 `json:"version"`
	Body      *primitive.PrivateKey `json:"body"`
	Signature primitive.Signature   `json:"sig"`
}

// GetID returns the ID of the contained PrivateKey.
func (e *PrivateKey) GetID() *identity.ID {
	return e.ID
}

// Claim wraps primitive.Claim
type Claim struct {
	ID        *identity.ID        `json:"id"`
	Version   uint8               `json:"version"`
	Body      *primitive.Claim    `json:"body"`
	Signature primitive.Signature `json:"sig"`
}

// GetID returns the ID of the contained Claim.
func (e *Claim) GetID() *identity.ID {
	return e.ID
}

// KeyringV1 wraps primitive.KeyringV1
type KeyringV1 struct {
	ID        *identity.ID         `json:"id"`
	Version   uint8                `json:"version"`
	Body      *primitive.KeyringV1 `json:"body"`
	Signature primitive.Signature  `json:"sig"`
}

// GetID returns the ID of the contained KeyringV1.
func (e *KeyringV1) GetID() *identity.ID {
	return e.ID
}

// Keyring wraps primitive.Keyring
type Keyring struct {
	ID        *identity.ID        `json:"id"`
	Version   uint8               `json:"version"`
	Body      *primitive.Keyring  `json:"body"`
	Signature primitive.Signature `json:"sig"`
}

// GetID returns the ID of the contained Keyring.
func (e *Keyring) GetID() *identity.ID {
	return e.ID
}

// KeyringMemberV1 wraps primitive.KeyringMemberV1
type KeyringMemberV1 struct {
	ID        *identity.ID               `json:"id"`
	Version   uint8                      `json:"version"`
	Body      *primitive.KeyringMemberV1 `json:"body"`
	Signature primitive.Signature        `json:"sig"`
}

// GetID returns the ID of the contained KeyringMemberV1.
func (e *KeyringMemberV1) GetID() *identity.ID {
	return e.ID
}

// KeyringMember wraps primitive.KeyringMember
type KeyringMember struct {
	ID        *identity.ID             `json:"id"`
	Version   uint8                    `json:"version"`
	Body      *primitive.KeyringMember `json:"body"`
	Signature primitive.Signature      `json:"sig"`
}

// GetID returns the ID of the contained KeyringMember.
func (e *KeyringMember) GetID() *identity.ID {
	return e.ID
}

// CredentialV1 wraps primitive.CredentialV1
type CredentialV1 struct {
	ID        *identity.ID            `json:"id"`
	Version   uint8                   `json:"version"`
	Body      *primitive.CredentialV1 `json:"body"`
	Signature primitive.Signature     `json:"sig"`
}

// GetID returns the ID of the contained CredentialV1.
func (e *CredentialV1) GetID() *identity.ID {
	return e.ID
}

// Credential wraps primitive.Credential
type Credential struct {
	ID        *identity.ID          `json:"id"`
	Version   uint8                 `json:"version"`
	Body      *primitive.Credential `json:"body"`
	Signature primitive.Signature   `json:"sig"`
}

// GetID returns the ID of the contained Credential.
func (e *Credential) GetID() *identity.ID {
	return e.ID
}

// KeyringMemberClaim wraps primitive.KeyringMemberClaim
type KeyringMemberClaim struct {
	ID        *identity.ID                  `json:"id"`
	Version   uint8                         `json:"version"`
	Body      *primitive.KeyringMemberClaim `json:"body"`
	Signature primitive.Signature           `json:"sig"`
}

// GetID returns the ID of the contained KeyringMemberClaim.
func (e *KeyringMemberClaim) GetID() *identity.ID {
	return e.ID
}

// MEKShare wraps primitive.MEKShare
type MEKShare struct {
	ID        *identity.ID        `json:"id"`
	Version   uint8               `json:"version"`
	Body      *primitive.MEKShare `json:"body"`
	Signature primitive.Signature `json:"sig"`
}

// GetID returns the ID of the contained MEKShare.
func (e *MEKShare) GetID() *identity.ID {
	return e.ID
}
