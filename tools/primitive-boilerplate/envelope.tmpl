package envelope
// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"

	"github.com/arigatomachine/cli/identity"
	"github.com/arigatomachine/cli/primitive"
)

// Shared unmarshaling for signed and unsigned Envelopes
func envelopeUnmarshal(b []byte) (*outEnvelope, identity.Identifiable, error) {
	o := outEnvelope{}
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, nil, err
	}

	var body identity.Identifiable

	t := o.ID.Type()
	switch t {
	{{- range.Types}}
		{{- if .Byte}}
			case {{.Byte}}:
				body = &primitive.{{.Name}}{}
		{{- end -}}
	{{end}}
	default:
		return nil, nil, fmt.Errorf("Unknown primitive type id: %d", t)
	}

	err = json.Unmarshal(o.Body, body)

	return &o, body, err
}

type outEnvelope struct {
	ID        *identity.ID        `json:"id"`
	Version   uint8               `json:"version"`
	Body      json.RawMessage     `json:"body"`
	Signature primitive.Signature `json:"sig"`
}
