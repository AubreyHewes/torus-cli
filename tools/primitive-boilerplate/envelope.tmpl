package envelope
// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"

	"github.com/manifoldco/torus-cli/identity"
	"github.com/manifoldco/torus-cli/primitive"
)

type outEnvelope struct {
	ID        *identity.ID        `json:"id"`
	Version   uint8               `json:"version"`
	Body      json.RawMessage     `json:"body"`
	Signature primitive.Signature `json:"sig"`
}

{{range .}}
// UnmarshalJSON implements the json.Unmarshaler interface for {{.Name}}
// envelopes.
func (e *{{.Name}}) UnmarshalJSON(b []byte) error {
	o := outEnvelope{}
	err := json.Unmarshal(b, &o)
	if err != nil {
		return err
	}

	var body identity.{{.Mutability}}

	t := o.ID.Type()
	switch t {
	{{- range $b, $ts := .Types -}}
	case {{$b}}:
		switch o.Version {
		{{- range $ts -}}
		case {{.Version}}:
			body = &primitive.{{.Name}}{}
		{{end -}}
		}
	{{end -}}
	default:
		return fmt.Errorf("Unknown primitive type id: %#02x", t)
	}

	if body == nil {
		return fmt.Errorf("Unknown schema version %d for primitive type id: %#02x", o.Version, t)
	}

	err = json.Unmarshal(o.Body, body)
	if err != nil {
		return err
	}

	e.ID = o.ID
	e.Version = o.Version
	{{if eq .Mutability "Immutable"}}e.Signature = o.Signature{{end}}
	e.Body = body

	return nil
}

{{ $envType := .Name}}
{{ range $b, $ts := .Types -}}
{{- range $ts -}}
// {{.Name}} wraps primitive.{{.Name}}
type {{.Name}} struct {
	ID      *identity.ID     `json:"id"`
	Version uint8            `json:"version"`
	Body    *primitive.{{.Name}} `json:"body"`
	{{if eq $envType "Signed"}}Signature primitive.Signature `json:"sig"`{{end}}
}

// GetID returns the ID of the contained {{.Name}}.
func (e *{{.Name}}) GetID() *identity.ID {
	return e.ID
}
{{end -}}
{{end -}}
{{end}}
