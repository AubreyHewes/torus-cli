package envelope
// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"

	"github.com/arigatomachine/cli/identity"
	"github.com/arigatomachine/cli/primitive"
)

type outEnvelope struct {
	ID        *identity.ID        `json:"id"`
	Version   uint8               `json:"version"`
	Body      json.RawMessage     `json:"body"`
	Signature primitive.Signature `json:"sig"`
}

{{range .}}
// UnmarshalJSON implements the json.Unmarshaler interface for {{.Name}}
// envelopes.
func (e *{{.Name}}) UnmarshalJSON(b []byte) error {
	o := outEnvelope{}
	err := json.Unmarshal(b, &o)
	if err != nil {
		return err
	}

	var body identity.{{.Mutability}}

	t := o.ID.Type()
	switch t {
	{{- range .Types -}}
	case {{.Byte}}:
		body = &primitive.{{.Name}}{}
	{{end -}}
	default:
		return fmt.Errorf("Unknown primitive type id: %#02x", t)
	}

	err = json.Unmarshal(o.Body, body)
	if err != nil {
		return err
	}

	e.ID = o.ID
	e.Version = o.Version
	{{if eq .Mutability "Immutable"}}e.Signature = o.Signature{{end}}
	e.Body = body

	return nil
}
{{end}}
