// Code generated by go-bindata.
// sources:
// data/ca_bundle.pem
// data/public_key.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCa_bundlePem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x97\x4b\xd7\xa2\x40\x92\xf7\xf7\x7c\x8a\x77\xef\x79\x8f\xdc\xc5\x45\x2f\x32\x21\xb9\x27\xc8\x5d\xd8\x71\x51\x10\x05\x51\xc1\x04\x3e\xfd\x1c\x9f\xa7\xaa\xba\xaa\xba\x67\x7a\xce\x19\x97\x49\x44\x18\x09\x11\xf1\x8b\xff\xff\xff\xfc\x20\xd2\x0c\xe7\xff\xc9\xc8\x0f\x0d\xd5\x90\x41\x88\xbe\x4e\x29\x6c\x18\x28\x08\x65\x19\xac\x5a\x0d\x88\x01\x41\x6d\x84\xb0\xdf\x44\x31\x9f\xe8\xa2\x35\x73\xdc\xd3\x0c\xf1\x6d\x92\xba\x74\x4c\x94\x10\x38\xb0\xbe\x3e\x9a\xeb\x45\xdb\x13\x1a\x02\xef\xa5\x52\x40\x01\x02\xf6\x5e\x44\xf6\x52\x25\xf6\x3c\x0d\x11\x33\x8e\x56\x74\xc0\x80\xd6\x00\x13\x21\xb9\xc1\x9a\x97\x30\xcd\xa9\xdb\x4f\xd8\xbf\x12\x95\x7c\xd9\x29\x68\x86\xb0\x48\x54\x91\x2a\x58\xbe\x8e\xba\xfd\xbb\x92\xa1\xe2\x05\x60\xc6\x90\x3f\x2a\x21\x62\x70\x08\x16\xdc\x02\x82\x15\x40\xb0\x7a\x3f\x2a\xa1\xf1\x39\x9b\xdd\xf0\xd7\x19\xf1\x5b\x64\x53\x18\x5c\xbf\xfe\x09\x36\x58\x8e\x63\x3c\x2b\xeb\x27\x4d\x27\x86\xe0\x1e\xc2\xab\x3a\xa6\xc7\xe1\x5d\xb4\x28\xc6\x10\x7f\x67\x34\x63\x1c\xb1\xf1\x52\x75\xf1\x62\x20\x07\x52\x86\xa2\xca\xd8\x93\x88\xe2\xfd\x48\x8d\x64\x5f\xa9\x15\x2c\x4f\xea\x1a\x5d\x3e\x57\x91\x83\x87\x16\x18\x05\xa7\x78\x08\x02\x2f\x02\x80\x37\xa0\x42\xc0\xe7\xb9\x45\x81\xbb\x01\x81\xa7\xc8\x61\x93\xf5\x5c\x29\x4a\xf9\xab\xe6\x92\x89\x88\xd8\x06\x95\x30\xa2\x40\x84\xc6\x3d\xc0\xeb\xdd\x2a\x35\xa1\xb8\x1d\xe2\xfb\xe6\xa5\xb8\xfe\x13\x57\xfc\x99\x05\x45\x9f\x51\x25\x5e\x0f\x39\xcf\xb5\x3c\x71\xe6\x66\xb8\x8d\x8b\x98\x47\xd6\x95\x0f\x99\xc7\x69\x0f\x5d\x62\xa9\x2d\xb1\xc4\xb5\x9b\x67\x3b\x4e\xef\xbb\x42\x8f\x2f\xc7\xd7\xe1\x66\x8a\x0f\x17\x0f\x6a\x7d\x12\xa8\xe2\xa6\x1c\x36\x8c\x34\x6f\x20\x2b\x02\x7a\xb8\x5c\x3c\x77\x3a\x5c\xcf\x8b\xb2\x9c\x7c\x7e\xf6\xea\xe6\xdc\x8a\x62\x7a\x67\xf6\xf1\xe6\xd4\x45\x5c\x9f\xaf\xe7\xf7\xa0\x82\x8d\xef\xae\x62\x72\x8f\x3b\x0a\x0a\xf3\x46\x65\x87\x58\x9a\x4f\x96\xe3\xef\x26\x31\x5f\x95\x2a\x12\xd2\xf8\xc8\x84\x39\x19\x9e\xdd\xec\xcb\xcc\x26\x79\x81\xb4\x5b\xc5\xc7\x61\xb3\x4a\xe0\xa9\x18\xa1\xcc\xaa\x38\x5e\xd8\x33\xa1\x68\xa3\xb5\xdc\x11\x1d\xcb\x6d\x7c\xee\xc6\x50\x2d\x1b\x61\x03\xce\x5a\x8a\x35\xfc\x78\xbc\x4d\xd1\x2e\x8f\x17\xd0\x3c\x34\x21\x34\x36\xca\x93\xf6\x47\x2c\x49\xd7\x8d\x74\x8c\xa0\x7c\xf2\x24\x43\xa3\xac\x09\x38\xb9\xbd\x0b\x2f\xc6\x68\x65\xe9\x6c\x31\x18\x4f\xa1\x39\xc6\x7b\xa3\xb8\x81\x1a\x43\x00\xb4\xb6\xae\xd1\x0e\x1b\x06\x74\x56\x10\x7c\x3e\xb1\xee\x63\x08\xce\x12\x92\x15\xa0\x51\xc0\xd3\xb7\xa0\x46\x00\x03\xfe\xf3\x9d\x2b\x85\x20\xb8\x25\x1e\xfa\x94\x75\xd3\x82\xea\xcb\xc1\xe3\x91\x5a\x7b\x51\x92\xfb\x1d\xbc\x59\xf5\x49\x48\x82\x83\xe5\x46\x70\x39\x25\x54\xa5\xbe\x85\x43\x05\x88\xfe\x29\x51\x9f\x6e\x21\xac\x89\x7a\x07\x51\x03\x5b\xdc\x84\xe1\xeb\x0d\x96\xe8\x26\xf3\x46\x92\xad\xfa\xab\x81\xae\x5c\xd7\xe4\x44\x52\xc3\x22\x29\x84\x5e\xa4\x53\xc0\x43\xa8\x58\xe1\x88\x65\x49\x93\xe5\x97\x06\xbc\x48\x85\x2b\x80\xcd\xc5\xb9\x57\xba\x4f\xdc\x8b\xf4\x2e\x58\x67\x2d\x65\x61\x29\xd8\x3d\x9d\xb2\x68\xb6\xbb\x1f\x15\xda\xfb\x0b\x55\x1d\x1d\xda\xee\x9c\x77\x11\x02\x11\xd6\xf5\x13\xd6\x48\x85\x5e\x49\xc0\x3d\x9d\x72\xdd\xa7\x4b\xe5\xfe\xb6\x59\x67\xa9\xfe\x63\x80\x60\xff\x9b\x81\x73\x2b\x5b\xb0\xfd\x7e\x61\x12\x72\x15\xc0\x62\x25\xa8\xf1\x03\x90\xe6\x22\xfc\xca\x2c\xe5\xcc\x17\x65\xf7\xe6\xbb\xe0\xfc\x36\x0d\xd1\x94\xfe\x68\xdb\x4a\x37\x99\x92\xf3\xa6\x94\xdd\x8f\x36\xf7\xdb\x73\xce\x7c\xfd\x68\xaa\xca\x00\x1e\xc6\xe0\x4e\x28\x19\xa4\x5a\xc6\x23\x0c\x3c\x03\xfe\xdd\x38\x32\xf9\x6e\x1c\xe0\xc9\xea\xf5\xc9\x33\x13\xd7\x1f\xee\xbc\x2a\xeb\x6e\xd8\xa6\x9c\x13\xba\xb1\xc1\x50\xc2\x5e\x1b\xb7\xb9\x98\x5d\x1e\x8b\x89\x2e\x9b\x9d\xc0\x6e\x72\x26\x12\x16\xf1\x02\x48\x7a\xee\x8e\xaf\x17\x7b\x33\x89\xa9\x3e\xf0\xc0\x1e\x86\xc6\xaa\x05\x91\x15\xae\xc7\x5a\xba\x1e\x58\xd9\x11\x46\x4a\xd4\x76\x05\xf6\xca\x50\x92\xa5\x59\xc9\x9c\x31\x0d\xab\x5d\x72\x50\xa4\x28\xbb\xf8\x16\x30\x0f\xf0\x98\x73\xf4\x16\x14\x64\xca\x4e\xb4\x96\xab\xc8\x93\xa6\xba\x4c\xbd\x3a\xe8\x37\x86\x06\x0d\x4a\xda\xda\xa4\x81\x4e\x98\x85\x51\x8c\x92\x49\x8e\x22\x18\xc7\x8c\x94\x8e\x05\xb8\x1c\x1e\xdc\x72\x7c\x60\xc8\x4b\xee\xba\x29\x47\x98\x4c\x59\x70\x2d\xde\x57\xe7\x5e\x1d\xec\xbc\xbb\x42\xb6\x66\xa8\x69\xf0\x97\xd5\xdb\x3d\x94\x9e\x39\x4a\x7d\x2f\x39\x52\xbc\x4b\x4d\x71\x11\x25\x30\x5e\xf5\xd2\x09\x7c\xd0\x0f\xe1\x65\x9c\xa1\xd5\x8e\xd6\xc1\x08\x6c\x1c\xcb\xf3\xee\xc2\x37\x7d\x39\xeb\x59\x40\x2d\xf6\x62\x79\xc7\x86\xb0\x09\x7b\x7c\xd1\x0f\xfb\x24\x33\xa7\x11\x6c\xda\x50\x53\x2c\x3e\x3a\xdb\x27\x99\x0e\xd4\x9d\x1a\x5c\xa4\xbb\x60\xdb\x2c\x63\x4b\xc6\x0a\x86\xfc\xc9\x0e\xfe\x96\xfa\x1a\xec\xc8\x51\xfe\x75\xd8\xff\x27\x10\x5c\x5b\x59\x06\xdc\xe3\x0f\x10\x04\x97\x7b\xbf\x9e\x0f\x22\x79\xf0\x4f\x70\xbe\x1a\xbb\x67\x8f\xe6\xf6\xdf\x82\x40\x86\x9d\x82\xec\xbf\xc7\x31\x52\x80\xfb\x3d\x8e\xeb\x10\xd2\xea\x92\x7f\x6a\xb5\x43\x33\x5a\x81\xff\x7d\x5e\x86\xf2\xcd\x69\xa9\x82\xf3\xe9\x92\xf5\x9b\x42\x8b\x66\x33\x04\xed\xcf\x19\xae\xab\x0e\x9d\x1e\xcd\x2e\x4f\xe2\x57\x26\xc3\x28\x4b\x9c\x7b\xd1\xed\x5f\x05\x5b\x0d\xd9\x11\xbf\x0c\x74\x9b\xd2\x85\x9f\x29\x77\x05\xc2\xb7\x13\x0e\xf1\xed\x0f\xa7\x30\x3b\x9a\x6c\x9e\x38\xb7\x72\x81\xc1\xa7\x31\x0c\xe4\xdc\xca\xde\x1f\xb2\xee\xd6\xa6\x47\xff\x66\x20\x95\xa1\x2a\xad\x79\x97\xdd\x8d\x3e\x05\x60\x34\x50\xb9\xfc\x42\x91\x12\x2d\x4e\x88\x96\x7f\xa2\x08\x73\x38\x34\xd6\x0f\x8e\x7e\xa2\xc8\x0d\xff\xf7\x28\xca\x30\x2c\xbf\xec\xc0\x8c\xbd\x9f\x70\x34\x54\xf3\x4d\x15\x9c\x57\x7b\x34\xaa\xf1\x07\xc9\x81\xf1\x41\x92\x69\xdd\x33\xa3\x79\x97\x0e\xf0\x10\x84\x1e\x50\xea\x1a\x1d\x80\x22\xcb\xc0\xbb\xcb\x75\x8d\x20\xb0\x4d\xbe\xd6\x75\xeb\xe4\x1c\x5b\xaa\xcc\xf7\x7a\xad\x42\xfa\x9c\xec\x52\x86\x6f\xd8\xbd\x79\xbb\xef\x99\xba\x49\x0f\x37\xba\x01\xe8\xfd\x04\xc6\xd8\x8c\x6e\xed\x71\x83\xfb\x7a\x84\x9e\xf3\xbc\xc3\xf7\x9d\x2b\x02\x5c\xeb\xea\x9a\x61\x6a\xef\x8a\x86\x21\x95\x1b\x71\x3d\x33\xa3\xdf\xf3\x41\x72\x21\xdc\x78\x12\xaa\xb6\xae\xd2\x4c\xbc\x6e\xef\x06\x3b\x9c\x62\x2b\x9e\x7c\x95\x3f\xf7\xfb\x11\x16\x62\xe5\x3c\xca\x6e\x8d\x04\x7b\xfb\x20\x94\xa1\x02\xad\xd0\x9f\x5e\x6d\x5b\xdd\x26\xdf\xbe\xfc\xb9\x3b\x44\x4a\xad\x73\x96\xa5\xbb\x71\xcb\x4f\x63\x32\x6c\xa2\xa6\xc7\x66\x31\xdd\xf4\xe6\x54\xf0\x5d\x1b\x95\x80\x34\x5d\xde\xf8\x49\x2e\x52\xb1\x3b\xb5\x44\xd0\x85\xc0\x59\xb7\xf4\xa9\x26\xf6\x91\x1e\x2b\x1d\x30\x0c\x5f\x5f\xf7\xc2\x0e\x25\x89\xb8\x2b\xf9\xf2\x28\xb5\xa6\x66\xd9\x8d\xb2\x79\x96\xd5\xe3\xf5\xa0\xa5\x41\xba\x2a\x17\xc6\xa6\xf6\x9c\x5a\x1e\xbb\x7e\x2b\x0e\x91\xbc\xac\x17\xeb\x79\x03\x7c\xb1\x7f\xef\xec\xc4\x28\xe6\xb2\x3c\xc5\xae\xca\xf1\xda\xd9\x50\x84\x45\x37\xf6\xe9\xd6\x93\xe1\xd6\x30\x14\x54\x23\xb2\x71\x17\xaf\xa3\xda\x3a\x98\x0a\xf3\x69\x3c\x6a\x5a\x06\x04\x01\x90\xbb\x9f\x46\xf9\xc0\x7e\xc4\x40\xfa\x1a\x78\xe8\x9b\x2e\x2a\x06\x5f\x08\x22\x4a\xfd\x05\x8d\xc3\x87\x42\xd4\x67\x1b\x00\xb5\xa6\x61\x48\x7f\xa3\xa8\xf6\x12\x08\x03\xa4\xe1\x45\x75\xdc\x45\x52\xcc\x20\xb2\xeb\x26\xeb\xf1\x69\x41\x88\xb7\x64\x05\x9c\xbf\xc6\x73\x80\x91\xa6\x80\x84\xaa\x61\x50\x1e\x89\x72\x7e\xd4\xfa\x11\xcb\x2f\xfe\x62\x59\x7c\x11\x3d\x4a\xa9\xd1\xfc\x7a\x85\xfc\x6f\x70\x80\xc0\xf3\x5f\x58\xbb\x13\xbb\xfe\x0d\x45\x18\x68\x9a\xd1\x35\x74\xa5\x03\xd1\x5e\xf6\xef\x94\x73\xc8\x8f\xd9\xde\xe3\x8b\xd0\x7c\xef\x37\x02\x5d\xf6\xf1\x5a\xc9\x42\x5b\xb0\x34\x71\xc1\x1f\x01\x2c\xcd\xd6\x7e\x05\x68\xcb\xde\x9b\xca\xcf\x9a\xa6\x95\xcb\xef\xc8\xf9\x9b\x38\xd9\x6a\x4c\x29\x1b\x2f\x14\x56\xbe\xef\xae\x13\x8f\xc5\x8a\x47\x3e\xb8\xb9\xcb\xe2\x9f\x41\x3b\xf2\xdf\x06\xa5\xfe\x25\xea\x17\x6e\xd0\x4f\xdc\x58\x18\xd4\x04\xd6\x29\x8a\x7d\xba\x06\xca\xbf\x9b\x48\xc0\x95\x81\x87\x40\xda\x56\xf2\xd1\x26\xde\x18\x8a\xb6\xed\x5e\x71\xc7\xce\x2a\x5f\x97\xe0\xf4\xee\xd5\x04\x4c\x82\x6c\x90\xcd\xae\xc0\xb7\x83\x1d\xbf\x23\x37\x74\x9c\xe4\xd1\x5f\xd7\x20\xa1\xf0\x45\x1b\x02\x14\x3c\x7b\x97\xde\x8f\xd6\xb0\x16\x27\x7f\xab\xde\x65\xb3\xc0\xd2\x1d\xcc\x17\xc5\xe7\xba\x16\xe9\x3c\x49\x44\xb2\x7b\x69\x4a\x5d\xed\x3d\x63\x98\x50\x75\x56\x77\x60\xda\x76\x39\x75\x5a\xac\x6a\x20\xc0\x3c\x3f\x66\x4d\xe5\x0f\x65\x2f\x67\xc7\x2e\x04\x42\x3a\xe4\x87\x5d\xf5\x3c\x3d\x5e\x47\xac\xad\x3b\xcb\x63\x9b\x57\x3c\xe7\x12\xe3\xf1\xb5\xfd\xde\x6d\x49\x37\x54\xf6\x03\x5a\x54\xe1\xfb\x69\x23\x84\x9d\x1b\xaa\xe7\xb3\x7e\xb0\xaf\x46\xf3\x68\xa0\x96\x98\x62\x31\xb2\xa9\xaa\x0d\xbd\xd8\x96\x35\xb0\xa2\x56\x54\x2e\xa0\x6a\x2b\xfe\x36\xa8\x44\x12\x9a\xca\x7a\xca\x28\x76\x28\x5a\x45\xe2\x36\x66\x2a\x87\xf5\xf1\xb9\x95\x97\x38\xf0\xe5\x3e\xcc\xc9\x31\x23\xc7\x3a\xd1\xe7\xe5\x7d\xf5\xc0\x25\x78\x8a\x84\xa1\xaf\x29\xb3\xf3\x83\x9b\xe7\xa6\x97\x65\xb8\x5f\x19\xd3\xe7\x23\x2a\xbf\x96\x2d\x0e\xf6\x65\xf7\x7e\x8c\x5d\x2d\x5c\xa2\xdc\x7b\x3c\xca\x50\x70\x4c\xba\xd1\xc0\x3f\xfe\xf1\x7f\xc0\x4d\xf5\x19\x72\x0c\xfb\x13\x37\x26\xb0\x4a\x37\xb8\x12\xba\x7e\x56\xdb\x7f\xb7\x3a\x60\xad\x9e\xe5\x15\x98\x9f\x4e\xa1\x20\x48\x43\x70\x8b\x43\x1c\x44\xc4\xf8\xd6\x14\x16\x9a\xe7\xb0\xd2\xd4\x25\xeb\x6e\xb7\x42\xf3\xea\x58\x8b\xdb\x5c\x13\xde\x85\xb6\xef\xf3\x24\x5e\x6d\x19\x9a\x45\x87\x27\x1c\x1a\x84\xc2\xe0\xcb\xc9\x46\xcb\xed\x0f\x27\x8f\x9d\x9b\x92\xc3\x35\xbe\x40\x25\x3b\x9a\x74\x9e\x64\x43\xca\xaa\x74\x9e\xec\xa7\x0f\x25\x7e\x42\x82\x3a\x85\xe0\xa4\x12\x9a\xb8\x21\x10\xb0\x62\x7c\x8b\x12\x05\xe6\x2a\xa1\x57\xe7\xb3\x63\xb5\xf5\xec\xac\x58\xc0\x61\x96\x63\x43\x4b\xff\x56\x49\x54\xb4\x22\xef\xc7\xb2\x8a\x64\x88\x75\xef\x68\x0e\x1f\x12\xa4\x21\x0a\x7f\x14\x3a\x82\x33\xb6\x22\xd6\x79\x57\xba\xbf\x66\x9a\xfa\xca\x42\x74\xc3\xf2\xb7\x90\xa1\xe4\x06\x97\x11\xe7\x37\x65\x97\x0d\x59\x32\x5f\x0d\xd5\xbf\xa5\x6c\x33\x15\xec\xfc\xce\xd8\xdb\xad\x5c\x48\x1d\x24\x42\x6b\xb7\x68\x87\x95\xeb\x4f\xe4\x2c\x3f\x7d\xa8\x6f\xa7\x0f\x09\x3f\x77\x8c\xd7\x0f\x83\xbe\x10\xf4\x91\x47\xda\xad\xcb\x13\xa7\xa9\xb4\xa8\xf6\x8e\x31\x9d\x6b\xfb\x25\x3f\xfa\x82\x21\xd3\xb5\xbf\x1a\x5f\xca\x88\xfa\x4f\xd2\xe8\x87\x32\x8a\x15\xe5\x89\xac\xf7\xcd\xe5\xdf\xc9\x46\xcb\xaa\x73\x7b\x6f\xc2\x97\x2f\x6d\xa9\x45\xda\x9c\x0d\xe8\x8c\x56\xf8\x34\x14\x8e\x96\xf6\xec\xc8\xba\xda\x21\x73\x3a\xf9\xde\x31\x42\x09\x0c\x79\xb1\x99\xdb\x76\x7f\x3f\x0b\x66\xe4\x6a\x02\x7b\x2d\xa2\xe1\xe1\xf1\x47\xbd\x65\x65\xda\xa1\xc2\x6e\xcb\x2e\xa8\xcf\xc6\x37\xce\xe3\x07\xff\x1c\x7b\x2f\x12\xa5\xed\xce\x9c\x70\x3e\x35\x6c\x62\x77\xf7\x5d\x62\x06\xa6\xcf\x14\x5b\x33\x97\xc3\x52\x75\x15\xf6\xee\xd3\x2a\x76\xfa\xbe\xf6\xef\x94\x3b\x6e\x5c\x4f\xbd\x57\xc1\x75\x77\xf0\x04\xb4\x13\x98\x22\x01\xba\x62\x47\x93\xb0\x3b\xe7\xbc\x28\xec\xc8\xbc\x89\x8e\x2c\xe9\x94\x03\x62\xae\xb2\xc5\x2b\xd8\x41\xe7\xf3\x54\x89\x5e\x96\xd0\x32\xb5\x2e\x8b\x3f\x3c\x8a\x9e\xbb\x47\x69\x70\x9c\xbb\xf0\x81\xc5\x22\xef\x98\x5d\xeb\x4d\x53\x4d\x2b\x93\x72\x38\xfb\x9b\x69\xce\x79\xfa\xc6\x66\x6f\xb7\xae\x54\xd5\x6f\xad\xa4\x34\xce\x27\x50\x0b\x26\xe5\xf1\x09\x5b\xe8\xee\x2e\x73\x87\xc6\xcb\x57\x93\x51\xc3\x73\xb3\x6c\x75\xe3\x69\x74\xab\xb9\xcf\x62\xed\x72\xde\xda\xfc\xc3\x96\xfc\x58\xd7\x63\x90\xc2\x93\x0a\x6e\x91\x70\xe1\x24\xf5\xa3\x8c\xa8\x2f\x69\x74\x06\xa4\x3e\xd1\x44\xf9\x16\x2f\xe1\x87\x43\x10\x44\x04\x7c\x38\xb5\x7e\xaf\x60\xba\x27\x7d\xc9\x25\x08\xb0\x0c\xd2\x94\xe8\xde\x97\xad\x4b\x41\x98\x22\xd5\x9c\xcf\xc0\xd9\x3c\x40\x55\x12\x6b\xbd\x18\xf7\x67\x33\x06\xc3\xba\xa0\x4c\x53\x30\xfc\x86\x9e\x41\xbc\x14\xc3\x1c\xa8\xf6\xfe\x3c\xee\x75\x97\xf3\x37\xda\x5e\x1d\x63\xea\xe9\xac\x47\x84\x0d\xf7\x91\xb6\x3d\x46\xbf\xa9\x1f\x82\x20\x44\x98\x78\x21\x28\xff\x10\x34\x69\xea\xfd\x53\xd0\x48\x13\x55\x72\x78\xb1\xfb\x78\xb5\x57\xd0\xfc\xa5\x7c\xe2\x5f\x86\x5c\x3d\xfd\xb2\xe3\xea\x2f\xcc\x60\x39\xfd\xca\x8c\xd2\x89\x77\xc6\x90\x26\x9a\x08\xb2\x3b\x3c\x69\x6a\xf2\x0b\x33\xab\xdd\x3b\x2b\xbe\x08\x4c\xb9\xec\x17\xbb\x73\x96\x42\xf9\x5e\x3d\xf5\x00\x20\xb9\x05\x06\x06\xa9\x46\x41\xf5\x83\x15\xf0\xf7\xca\x65\xff\x58\xb9\x20\x90\x71\xc5\xf3\xc3\x71\xe9\xb9\x41\xe5\x6e\x58\xf2\x85\x78\x5b\xce\x61\xd1\x0a\xba\xb2\xdf\x6a\x54\x7c\xb6\x16\xa8\x14\x63\x0d\xf7\xe1\xac\xd2\xb4\xa5\x4d\x9b\x99\x39\x4a\xd9\xe6\x69\x1f\xb8\x8d\xf7\x6a\x0f\x8e\xc6\xd4\x5e\x5d\xdb\xfc\x46\xde\x32\x88\x55\x22\x58\xee\xe6\xda\x6b\x21\x97\x57\x0c\x75\xa3\xa5\x74\x4a\xb8\xd3\x5e\x70\x7d\xd9\x1e\x36\x9e\xbc\x8e\xe4\xf4\xd8\x55\x03\xbf\xc2\xbe\xac\x14\xaf\xd9\x46\x7b\xba\xc8\xac\x49\x36\xb7\xea\xc0\x44\xcc\xe9\xf9\x0e\x1a\xc2\x25\x7d\x82\xbc\x91\x92\xda\x99\x74\xd6\x22\xe6\x45\x1e\x57\x9c\x74\xc0\x31\xff\xda\x5a\xb2\xee\x5e\xab\x41\xd2\x6f\xe7\x3d\xf4\xa3\xc1\x8c\x4f\xe8\x58\x07\xa9\x7c\x76\x7b\xc9\xe4\xb6\x8b\x13\x56\x0c\x2b\x6e\x37\x43\x46\x09\xfb\xf7\xe1\x29\x58\xc9\x6e\x09\x72\xc7\x87\x62\x6f\xea\x9a\xd2\xb3\xd9\xbe\x95\x32\x6e\x1b\x2f\xb1\x8b\xe2\x87\x57\x65\x27\xde\xdd\x46\x17\x41\x6b\x6d\x03\x64\x7a\x5a\x06\xce\x21\x3d\x9d\x9a\x89\x8a\x5f\xcb\x64\x03\xd7\x63\xe6\x2b\xdf\x9d\x42\x4b\xf6\x6f\xc5\x96\x9c\x92\x97\xd5\x6c\x1d\xd4\x9f\xe3\x47\xcf\xbd\xd4\xed\x88\x37\x2c\xf6\x77\x25\x01\x0c\x47\x03\x9e\xfc\x4f\x14\xf9\xaf\x00\x00\x00\xff\xff\xb9\x5d\xc3\x84\xbe\x12\x00\x00")

func dataCa_bundlePemBytes() ([]byte, error) {
	return bindataRead(
		_dataCa_bundlePem,
		"data/ca_bundle.pem",
	)
}

func dataCa_bundlePem() (*asset, error) {
	bytes, err := dataCa_bundlePemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ca_bundle.pem", size: 4798, mode: os.FileMode(420), modTime: time.Unix(1483106242, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPublic_keyJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\x2a\x28\x4d\xca\xc9\x4c\x8e\xcf\x4e\xad\x54\xb2\x52\x0a\x28\xf1\x0c\xf6\xab\x2a\x0c\xcc\x0d\x0c\x70\xaa\xf0\xcb\x09\x2d\x37\x76\x4e\xa9\x28\x0e\x4f\xae\x8a\x48\xf2\x2c\xaf\x74\xad\xa8\xc8\xc9\x0e\x2a\x8c\x32\x77\x35\xb3\x34\x50\xaa\xe5\x02\x04\x00\x00\xff\xff\x13\xd9\xef\xab\x3d\x00\x00\x00")

func dataPublic_keyJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataPublic_keyJson,
		"data/public_key.json",
	)
}

func dataPublic_keyJson() (*asset, error) {
	bytes, err := dataPublic_keyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/public_key.json", size: 61, mode: os.FileMode(420), modTime: time.Unix(1483106242, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ca_bundle.pem": dataCa_bundlePem,
	"data/public_key.json": dataPublic_keyJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ca_bundle.pem": &bintree{dataCa_bundlePem, map[string]*bintree{}},
		"public_key.json": &bintree{dataPublic_keyJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

